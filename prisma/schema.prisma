generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String           @unique
  password        String
  role            Role             @default(END_USER)
  language        String?          // e.g., 'en', 'hi'
  profileImageUrl String?
  interests       String[]
  createdTickets  Ticket[]         @relation("TicketCreator")
  comments        Comment[]
  upvotes         Upvote[]
  downvotes       Downvote[]
  upgradeRequests UpgradeRequest[]
  createdAt       DateTime         @default(now())
  statusChanges   TicketStatusHistory[] @relation("ChangedBy")
}

enum Role {
  END_USER
  SUPPORT_AGENT
  ADMIN
}

model Category {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String   @unique
  tickets  Ticket[]
}

model Ticket {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  attachments String[]
  status      TicketStatus     @default(OPEN)
  user        User             @relation("TicketCreator", fields: [userId], references: [id])
  userId      String
  category    Category?        @relation(fields: [categoryId], references: [id])
  categoryId  String?
  comments    Comment[]
  upvotes     Upvote[]
  downvotes   Downvote[]
  statusLog   TicketStatusHistory[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
  createdAt DateTime @default(now())
}

model Upvote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
}

model Downvote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  ticketId  String
}

model TicketStatusHistory {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  ticket     Ticket       @relation(fields: [ticketId], references: [id])
  ticketId   String
  oldStatus  TicketStatus
  changedBy  User         @relation("ChangedBy", fields: [changedById], references: [id])
  changedById String
  timestamp  DateTime     @default(now())
}

model UpgradeRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  message    String?
  status     RequestStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}
